{\rtf1\ansi\ansicpg1252\cocoartf2707
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica-Light;}
{\colortbl;\red255\green255\blue255;\red17\green31\blue78;\red255\green255\blue255;\red0\green0\blue0;
\red255\green255\blue255;\red17\green31\blue79;}
{\*\expandedcolortbl;;\cssrgb\c8235\c17255\c38039;\cssrgb\c100000\c100000\c100000;\cssrgb\c0\c0\c0;
\cssrgb\c100000\c100000\c99985;\cssrgb\c8375\c17419\c38193;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs32 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Query: Create 6 new users\
\
\cf4 \cb5 \strokec6 insert into users(first_name, last_name, created_at, updated_at) values("David", "Ramirez-Vazquez", now(), now()),\
("Mary", "Ramirez-Vazquez", now(), now()), ("Zaira", "Ramirez", now(), now()), ("Gisselle", "Bonilla-Amaya", now(), now()), \
("Amaris", "Ramirez", now(), now()), ("Cazador", "Ramirez", now(), now());\
select * from users;\
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 Query: Have user 1 be friends with user 2, 4 and 6\
\cf4 \cb5 \strokec6 insert into friendship(user_id, friend_id, created_at, updated_at) values (1,2, now(), now()), (1,4, now(), now()), (1,6, now(), now());\
select * from friendship;\
\
\cf2 \cb3 \strokec2 Query: Have user 2 be friends with user 1, 3 and 5\
\cf4 \cb5 \strokec6 insert into friendship(user_id, friend_id, created_at, updated_at) values (2,1, now(), now()), (2,3, now(), now()), (2,5, now(), now());\
select * from friendship;\
\
\cf2 \cb3 \strokec2 Query: Have user 3 be friends with user 2 and 5\
\cf4 \cb5 \strokec6 \
insert into friendship(user_id, friend_id, created_at, updated_at) values (3,2, now(), now()), (3,5, now(), now());\cf2 \cb3 \strokec2 \
\cf4 \cb5 \strokec6 select * from friendship;\cf2 \cb3 \strokec2 \
\
Query: Have user 4 be friends with user 3\
\cf4 \cb5 \strokec6 \
insert into friendship(user_id, friend_id, created_at, updated_at) values (4,3, now(), now());\
select * from friendship;\
\
\cf2 \cb3 \strokec2 Query: Have user 5 be friends with user 1 and 6\
\cf4 \cb5 \strokec6 insert into friendship(user_id, friend_id, created_at, updated_at) values (5,1, now(), now()), (5,6, now(), now());\
select * from friendship;\
\pard\pardeftab720\partightenfactor0
\cf4 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 Query: Have user 6 be friends with user 2 and 3\
\
Query: Display the relationships created as shown in the table in the above image\
\
\cf4 \cb5 \strokec6 select users.first_name, users.last_name, users2.first_name, users2.last_name from users left join friendship on users.id = friendship.user_id left join users as users2 on users2.id = friendship.friend_id;\
\
\cf2 \cb3 \strokec2 NINJA Query: Return all users who are friends with the first user, make sure their names are displayed in results.\cf4 \cb5 \strokec6 \
\
select users.first_name, users2.first_name from users left join friendship on users.id = friendship.user_id left join users as users2 on users2.id = friendship.friend_id where users.id = 1;\
\
\cf2 \cb3 \strokec2 NINJA Query: Return the count of all friendships\cf4 \cb5 \strokec6 \
select count(friendship.id) as friendship_count from friendship;\
\
\cf2 \cb3 \strokec2 NINJA Query: Find out who has the most friends and return the count of their friends.\
\
\cf4 \cb5 \strokec6 SELECT user_id, COUNT(friendship.id) AS friend_count\
FROM friendship\
GROUP BY user_id\
ORDER BY friend_count DESC\
limit 1;\
\
Line 1-2: we select user_id so we can identify the user and we count by friendship id so we can go through all the existing friendships from the friendship table\
Line 3-4: we group by user_id so we can have a number for who has the most friends. In order to get that as a clear number order by friend count in desc or so that we immediately see who has the most friends. Putting it in desc allows us to see who has the highest as desc goes from highest to least. Since we put it to be ordered this way, the hight would appear first. If we had put asc instead,  the least would appear first.\
Line 5: in order to only capture the user with the most friends, we already have the one with the most friends appear first so we set a limit of showing only one. So, upon the first user, the count stop and no other appears and essentially shows us who has the most users. If we did not put a limit, it\'92d count everyone.\
\
\cf2 \cb3 \strokec2 NINJA Query: Return the friends of the third user in alphabetical order\
\
\cf4 \cb5 \strokec6 select users.first_name AS user, users2.first_name AS friends\
from users \
left join friendship on users.id = friendship.user_id\
left join users as users2 on users2.id = friendship.friend_id\
where users.id = 3\
order by users2.first_name;\
}