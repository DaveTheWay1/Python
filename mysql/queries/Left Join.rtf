{\rtf1\ansi\ansicpg1252\cocoartf2707
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\fswiss\fcharset0 Helvetica-Light;\f2\fswiss\fcharset0 Helvetica;
\f3\fnil\fcharset0 AndaleMono;\f4\fswiss\fcharset0 Helvetica-LightOblique;\f5\fswiss\fcharset0 Helvetica-BoldOblique;
}
{\colortbl;\red255\green255\blue255;\red17\green31\blue78;\red250\green250\blue250;\red0\green0\blue0;
\red250\green250\blue250;\red17\green31\blue79;\red217\green217\blue217;\red15\green15\blue15;\red17\green31\blue78;
\red255\green255\blue255;\red250\green250\blue250;\red217\green217\blue217;\red15\green15\blue15;}
{\*\expandedcolortbl;;\cssrgb\c8235\c17255\c38039;\cssrgb\c98431\c98431\c98431;\cssrgb\c0\c1\c1;
\cssrgb\c98540\c98540\c98417;\cssrgb\c8375\c17419\c38193;\cssrgb\c87843\c87843\c87843;\cssrgb\c7059\c7059\c7059;\cssrgb\c8235\c17255\c38039;
\cssrgb\c100000\c100000\c100000;\cssrgb\c98431\c98431\c98431;\cssrgb\c87843\c87843\c87843;\cssrgb\c7059\c7059\c7059;}
\margl1440\margr1440\vieww11720\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sa400\partightenfactor0

\f0\b\fs44 \cf2 \cb3 \expnd0\expndtw0\kerning0
1. What query would you run to get all tweets from the user id of 1?\

\f1\b0\fs24 \cf4 \cb5 - left join here essentially allows us to grab all including ones with a null result.
\f2\fs44 \cf2 \cb3 \
\pard\pardeftab720\partightenfactor0

\f3\fs28 \cf7 \cb8 SELECT *\
FROM users\
LEFT JOIN tweets\
ON users.id = tweets.user_id\
WHERE users.id = 1;
\f1\fs24 \cf4 \cb5 \
\pard\pardeftab720\sa400\partightenfactor0
\cf4 \
- with the query above, we grab all the users and left join with tweets. \
(The left joining with tweet is what allows even the users with a null on tweets to be grabbed. If we had just done join, users with a null on tweets would be left out.)\
- then we say where we want the joining to occur. \
(ON users.id = tweets.user_id. connecting them through their primary and foreign keys.)\
- lastly we specify which tweets we actually want to see\
(Tweets belonging to the user with the id of 1)\
Result:\
users											tweets\
id | first_name | last_name | handle | birthday | created_at | updated_at | id | tweet | user_id| created_at | updated_at\
1  | Kode 	 | Bryant       | mamba |  \'85 	       | 	\'85	      | \'85.	      | 1 | tweet..| 1         | \'85.		  | \'85		\
1  | Kode 	 | Bryant       | mamba |  \'85 	       | 	\'85	      | \'85.	      | 1 | tweet..| 1         | \'85.		  | \'85		\
1  | Kode 	 | Bryant       | mamba |  \'85 	       | 	\'85	      | \'85.	      | 1 | tweet..| 1         | \'85.		  | \'85		\
1  | Kode 	 | Bryant       | mamba |  \'85 	       | 	\'85	      | \'85.	      | 1 | tweet..| 1         | \'85.		  | \'85		\
* to preserve space in these notes, the dots represent what it actually there and the tweet.. represents the tweet actually typed out.\
In this case, all of users of id 1 had a tweet and none were left as null. If there was, because we did a. Left join, the null tweet would still appear\
If we had done just a join it would not have appeared.\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 \cb3 You can just grab the tweets by:\
\pard\pardeftab720\partightenfactor0

\f3\fs28 \cf7 \cb8 SELECT tweets.tweet\
FROM users\
LEFT JOIN tweets\
ON users.id = tweets.user_id\
WHERE users.id = 1;\
\
\
\pard\pardeftab720\sa400\partightenfactor0

\f1\fs24 \cf4 \cb5 First, we select the tweets from a user. This is made possible through dot notation. If we can recall dot notation allows us to call sometimes that lays within. tweets.tweet - tweets is the table and within that table there is the column of tweet.\
Then we left join tweets on users.id = tweets.user_id. by doing this we are joining the tables together. As mentioned in these notes, because we included \'93LEFT\'94 then this also grabs all the tweets even those that are left null.\
Finally, we say where users.id = 1 which allows us to join specify which tweets it is we want to see. In this case, the tweets belonging to the user with the id of 1. \
Result:\
tweet\
tweet\'85\
tweet\'85\
tweet\'85\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 \cb3 Or rename the output column that you want as\'a0
\f4\i kobe_tweets
\f1\i0 \'a0by modifying the statement to look like the following:\
\pard\pardeftab720\partightenfactor0

\f3\fs28 \cf7 \cb8 SELECT tweets.tweet AS kobe_tweets\
FROM users\
LEFT JOIN tweets\
ON users.id = tweets.user_id\
WHERE users.id = 1;\
\pard\pardeftab720\sa400\partightenfactor0
\cf7 \
\pard\pardeftab720\sa400\partightenfactor0

\f1\fs24 \cf4 \cb5 this does the same as the above but we are labeling it as kobe_tweets rather than just tweet like before\
Result:\
kobe_tweets\
tweet\'85\
tweet\'85\
tweet\'85\
\pard\pardeftab720\sa400\partightenfactor0

\f0\b\fs44 \cf2 \cb3 What query would return all the tweets that the user with id 2 has tagged as favorites?
\f2\b0 \
\pard\pardeftab720\partightenfactor0

\f3\fs28 \cf7 \cb8 SELECT first_name, tweet\
FROM users\
LEFT JOIN faves\
ON users.id = faves.user_id\
LEFT JOIN tweets\
ON faves.tweet_id = tweets.id\
WHERE users.id = 2;\
\
\pard\pardeftab720\sa400\partightenfactor0

\f1\fs24 \cf4 \cb5 First, we select what we want returned to us when we run the query. We want to see the first_name and the tweet. \
\pard\pardeftab720\partightenfactor0

\f3\fs28 \cf7 \cb8 SELECT first_name, tweet\
\
\pard\pardeftab720\sa400\partightenfactor0

\f1\fs24 \cf4 \cb5 Second, we say from users. I\'92m unsure why this is from users since we are also looking for \'93tweet\'94 and tweet is a column within users BUT I assume that this may be due to the fact that there is a relationship between the two and the root of it is users. Users will eventually get us to tweet.\
\pard\pardeftab720\partightenfactor0

\f3\fs28 \cf7 \cb8 FROM users\
\
\pard\pardeftab720\sa400\partightenfactor0

\f1\fs24 \cf4 \cb5 Next, we want to connect users with faves by left joining users to faves. I assume this is because we want to get a users favorites.
\f3\fs28 \cf7 \cb8 \
\pard\pardeftab720\partightenfactor0
\cf7 LEFT JOIN faves\
\
\pard\pardeftab720\sa400\partightenfactor0

\f1\fs24 \cf4 \cb5 Since we want something that belongs to a user we must ensure our actions keep that in mind hence we connect on the users\'92s id and user_id under faves
\f3\fs28 \cf7 \cb8 \
\pard\pardeftab720\partightenfactor0
\cf7 ON users.id = faves.user_id
\f1\fs24 \cf4 \cb5 \
\pard\pardeftab720\sa400\partightenfactor0
\cf4 \
now, we want to connects to the tweets table so we can see the USERS(users table) FAVORITEd(faves table) tweet.
\f3\fs28 \cf7 \cb8 \
\pard\pardeftab720\partightenfactor0
\cf7 LEFT JOIN tweets\
\pard\pardeftab720\sa400\partightenfactor0
\cf7 \
\pard\pardeftab720\sa400\partightenfactor0

\f1\fs24 \cf4 \cb5 And because we want to see the tweets.. we connect them through tweets hence
\f3\fs28 \cf7 \cb8 \
\pard\pardeftab720\partightenfactor0
\cf7 ON faves.tweet_id = tweets.id\
\pard\pardeftab720\sa400\partightenfactor0

\f1\fs24 \cf4 \cb5 \
Lastly we specify which tweets we want to see. 
\f3\fs28 \cf7 \cb8 \
\pard\pardeftab720\partightenfactor0
\cf7 WHERE users.id = 2;
\f1\fs24 \cf4 \cb5 \
\pard\pardeftab720\sa400\partightenfactor0
\cf4 \
Result:\
first_name | tweet\
Vince	       | tweet\'85\
Vince	       | tweet\'85\
\pard\pardeftab720\sa400\partightenfactor0

\f2\fs44 \cf2 \cb3 3. What query would you run to get all the tweets that user with id 2, or user with id 1, has tagged as favorites?
\f1\fs24 \cf4 \cb5 \
\pard\pardeftab720\partightenfactor0

\f3\fs28 \cf7 \cb8 SELECT first_name, tweet\
FROM users\
LEFT JOIN faves\
ON users.id = faves.user_id\
LEFT JOIN tweets\
ON faves.tweet_id = tweets.id\
WHERE users.id = 1 OR users.id = 2;\
\pard\pardeftab720\sa400\partightenfactor0

\f2\fs32 \cf2 \cb3 \
\pard\pardeftab720\sa400\partightenfactor0

\f1\fs24 \cf4 \cb5 The difference here is that instead of just having one where we have two. We do this by adding OR and the second were following after.
\f3\fs28 \cf7 \cb8 \
\pard\pardeftab720\partightenfactor0
\cf7 WHERE users.id = 1 OR users.id = 2;\
\
\pard\pardeftab720\sa400\partightenfactor0

\f0\b\fs44 \cf2 \cb3 4. What query would you run to get all the users that are\'a0
\f5\i following\'a0
\f0\i0 the user with id 1?
\f3\b0\fs28 \cf7 \cb8 \
\pard\pardeftab720\partightenfactor0
\cf7 SELECT users.first_name AS followed, users2.first_name AS follower\
FROM users\
LEFT JOIN follows\
ON users.id = follows.followed_id\
LEFT JOIN users AS users2\
ON users2.id = follows.follower_id\
WHERE users.id = 1;\
\
\pard\pardeftab720\sa400\partightenfactor0

\f1\fs24 \cf4 \cb5 The first line, we select what we are looking for. We want the first name of users, and have it be referenced as followed, and users2 first_name and have it be recognized as follower.we are getting the info from users hence why we put from users. Next, we left join with the table follows. As discussed earlier, we want the following and the table follows contains that information. We then say ON users.id, because that is the table we are currently on, = follows.followed_id because that is the table we are left joining with. (Table we are on comes first and then the table we want comes after) the we left join back to users so we can get the follower information. In order to left join back to users again, we include the AS we included on the first line. We already handed the followed, so the AS we are referencing is AS users2 from the first line as we want the follower info this time. we EDIT EDIT Could be because it is a self join. But we connect to get the info we want which puts us back to follows.follower_id. Lastly we specify whose info regarding followed and followers by including the last line of WHERE.\
\pard\pardeftab720\partightenfactor0

\f0\b\fs32 \cf9 \cb10 \outl0\strokewidth0 \strokec9 The key word to remember is the word "AS" because it lets us join the same table twice by providing SQL with another variable to reference the table that is getting joined again.
\f1\b0\fs24 \cf4 \cb5 \outl0\strokewidth0  \
Result:\
\
followed | followers\
kobe	    |  Vince\
\pard\pardeftab720\partightenfactor0
\cf4 \cb5 kobe	    |  Allen\
kobe	    |  Tracy\
kobe	    |  Trajon\cf4 \cb5 \
\pard\pardeftab720\sa400\partightenfactor0
\cf4 \
\pard\pardeftab720\sa400\partightenfactor0

\f0\b\fs44 \cf9 \cb11 \outl0\strokewidth0 \strokec9 5. What query would you run to get all users that are\'a0
\f5\i not
\f0\i0 \'a0following the user with id of 2?\
\pard\pardeftab720\partightenfactor0

\f3\b0\fs28 \cf12 \cb13 \strokec12 SELECT *\
FROM users\
WHERE users.id NOT IN (\
SELECT follower_id\
FROM follows\
WHERE followed_id = 2\
) AND users.id != 2;\

\f2\fs44 \cf9 \cb11 \strokec9 \
\pard\pardeftab720\sa400\partightenfactor0

\f1\fs24 \cf4 \cb5 \outl0\strokewidth0 Line 1-3: In this case, we want all that are NOT following the user with the id of 2. Therefore, we do a select all FROM users  WHERE users.id NOT IN - we specify early on as it is necessary to state which we are looking for before we dive into the next step that collects all the users for us.\cf4 \cb5  ALSO important to note. We say where users.id and not follower/followed_id here because we are select from the users table still and not from the follows table.\cf4 \cb5 \
Line 4-6: in parenthesis as this is a nested query, we state where we will be looking/selecting from. Because we want the followers that are NOT following users with the id of 2 we select all the followers hence select follower_id from the follows table, because that is where the following information is at, where followed_id = 2. The where in line 6 is there because we want the info regarding user number 2 and it is followed_id bc we are getting the information as user id of 2 where user id of 2 is the person being followed and not a follower themselves.\cf4 \cb5  THE PARANTHESIS PREVENTS FROM NEEDING TABLENAME.VARABLE BUT ONLY NEEDS VARIABLE. LIKE SO ABOVE\cf4 \cb5 \
\pard\pardeftab720\sa400\partightenfactor0
\cf4 \cb5 Line 7: AND is included because we do not want to include user of the id of 2 when looking at who does not follow that user with that id. We know that they don\'92t follow themselves but not for the same reasons as the others but because that user is the person being followed.\
Result:\
id | first_name | handle | created_at | updated_at\
1 | kobe	  | kobs   | now	   | now\
3 | arie	  | airr	    |\cf4 \cb5  now	   | now\cf4 \cb5 \
5 | vince	  | vma    |\cf4 \cb5  now	   | now\
The above are the people that are not following user 2. As we exlucded user 2 by saying and users2.id != 2, bc they\'92re the user who owns that account ofc they won\'92t follow themselves but own it. We excluded them so they do not appear. If we leave it they will appear in this list too.\cf4 \cb5 \
\
\pard\pardeftab720\partightenfactor0

\f3\fs28 \cf12 \cb13 \outl0\strokewidth0 \strokec12 SELECT users.first_name as user, COUNT(users2.first_name) as follower_count\
FROM users\
LEFT JOIN follows\
ON users.id = follows.followed_id\
LEFT JOIN users AS users2\
ON users2.id = follows.follower_id\
WHERE users.id = 1\
GROUP BY users.id;\
\pard\pardeftab720\sa400\partightenfactor0

\f1\fs24 \cf4 \cb5 \outl0\strokewidth0 \
Line 1-2: we select what we are looking for which is the users first name and, in this case, we are also looking for count which will involve a self join hence why both have an AS inclundeded. The COUNT in line 1 is user in order to successfully get the number digit of what we will. Be counting\
Line 3-5: we start off with saying from users because this is where all the information we want will be coming from. We left join into follows because within the follows is where all the information we are looking for will be coming from. We join on the two by id starting with users.id and then the id of the person being followed found within the follows table. \
Line 6-8 we left join back to users and we immediately state the AS users2 to make the connection back to the users2 found in line 1. We then state where the joining will occur and lastly specify which users.id id like this info from\
Line 9: we group it all together by stating group by, and then what we group by \
Result:\
user | follower_count \
Kobe | 4\
}